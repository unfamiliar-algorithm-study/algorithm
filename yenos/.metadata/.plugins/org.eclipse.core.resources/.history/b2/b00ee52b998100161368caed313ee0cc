/**
 * 
 */
package algoTree;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

/**
 * @author yenos
 * @date 2016. 9. 23.
 */
public class main {

	/**
	 * @date
	 * @param args
	 */

	public static ArrayList<String> queuee = new ArrayList<>();

	// public static String binNumber(int size) {
	// Random rg = new Random();
	// int n = rg.nextInt();
	// return Integer.toBinaryString(n).substring(0,size);
	// }

	public static void main(String[] args) {

		// System.out.println(binNumber(8));

		int cnt = 0;
		Scanner scan = new Scanner(System.in); // 문자 입력을 인자로 Scanner 생성
		// System.out.println("몇줄?");
		cnt = scan.nextInt();
		int randomVal = cnt;
		// cnt = 8;

		int[][] table = new int[cnt][cnt];

		String message;

		for (int i = 0; i < cnt; i++) {

			message = scan.next();

			// message = binNumber(randomVal);
			// System.out.println(message);

			// 나눠서. 스트링 배열에 저장..
			String[] arrMessage = message.split("");

			// 인트로받을 곳.
			for (int j = 0; j < cnt; j++) {
				table[i][j] = Integer.parseInt(arrMessage[j]);
			}
		}

		// 배열의 길이를 반으로 나눈다. 그리고 나눈만큼 for 루프를 돌린다.
		divide(table);
		System.out.println(result());

	}

	public static void divide(int arr2D[][]) {
		int arr2Dsize = arr2D[0].length;

		int[][] arrDivided = new int[arr2Dsize / 2][arr2Dsize / 2];
		int 사각형의합 = 0;

		if (arr2Dsize > 1) {
			queuee.add("(");

			사각형의합 = 0;
			// System.out.println("----------- 좌상 -----------" + 이중배열길이);
			for (int i = 0; i < arr2Dsize / 2; i++) {
				for (int j = 0; j < arr2Dsize / 2; j++) {
					// System.out.print(이중배열[i][j]);
					arrDivided[i][j] = arr2D[i][j];

					사각형의합 += arr2D[i][j];
				}
				// System.out.println();

			}
			// System.out.println("사각혀으이합 ==> "+사각형의합 );
			// 이중배열이 1개보다 클때 그리고 내부합이 0 이아니거나 모두 1이여서 합이 해당배열의칸보다 작을떄는 섞여있을
			// 경우임으로 다시 돌려서 구한다.
			if (arr2Dsize > 1 && 사각형의합 != 0 && 사각형의합 != (arr2Dsize / 2) * (arr2Dsize / 2)) {
				divide(arrDivided);
			} else if (사각형의합 == 0) {
				// 모두 0 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("0");
			} else if (사각형의합 == (arr2Dsize / 2) * (arr2Dsize / 2)) {
				// 모두 1 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("1");
			}

			사각형의합 = 0;
			// System.out.println("----------- 우상 -----------" + 이중배열길이);
			for (int i = 0; i < arr2Dsize / 2; i++) {
				for (int j = arr2Dsize / 2; j < arr2Dsize; j++) {
					// System.out.print(이중배열[i][j]);
					arrDivided[i][j - arr2Dsize / 2] = arr2D[i][j];
					사각형의합 += arr2D[i][j];

				}
				// System.out.println();
			}
			// System.out.println("사각혀으이합 ==> "+사각형의합 );
			if (arr2Dsize > 1 && 사각형의합 != 0 && 사각형의합 != (arr2Dsize / 2) * (arr2Dsize / 2)) {
				divide(arrDivided);
			} else if (사각형의합 == 0) {
				// 모두 0 일 경우.
				// queuee.add(이중배열길이*-1);
				// queuee.add();

				queuee.add("0");
			} else if (사각형의합 == (arr2Dsize / 2) * (arr2Dsize / 2)) {
				// 모두 1 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("1");
			}

			사각형의합 = 0;
			// System.out.println("----------- 좌하 -----------" + 이중배열길이);
			for (int i = arr2Dsize / 2; i < arr2Dsize; i++) {
				for (int j = 0; j < arr2Dsize / 2; j++) {
					// System.out.print(이중배열[i][j]);
					arrDivided[i - arr2Dsize / 2][j] = arr2D[i][j];
					사각형의합 += arr2D[i][j];
				}
				// System.out.println();
			}

			// System.out.println("사각혀으이합 ==> "+사각형의합 );
			if (arr2Dsize > 1 && 사각형의합 != 0 && 사각형의합 != (arr2Dsize / 2) * (arr2Dsize / 2)) {
				divide(arrDivided);
			} else if (사각형의합 == 0) {
				// 모두 0 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("0");
			} else if (사각형의합 == (arr2Dsize / 2) * (arr2Dsize / 2)) {
				// 모두 1 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("1");
			}

			사각형의합 = 0;
			// System.out.println("---------- 우하 -----------" + 이중배열길이);
			for (int i = arr2Dsize / 2; i < arr2Dsize; i++) {
				for (int j = arr2Dsize / 2; j < arr2Dsize; j++) {
					// System.out.print(이중배열[i][j]);
					arrDivided[i - arr2Dsize / 2][j - arr2Dsize / 2] = arr2D[i][j];
					사각형의합 += arr2D[i][j];
				}
				// System.out.println();

			}

			// System.out.println("사각혀으이합 ==> "+사각형의합 );
			if (arr2Dsize > 1 && 사각형의합 != 0 && 사각형의합 != (arr2Dsize / 2) * (arr2Dsize / 2)) {
				divide(arrDivided);
			} else if (사각형의합 == 0) {
				// 모두 0 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("0");
			} else if (사각형의합 == (arr2Dsize / 2) * (arr2Dsize / 2)) {
				// 모두 1 일 경우.
				// queuee.add(이중배열길이*-1);
				queuee.add("1");
			}
			queuee.add(")");
		}

	}

	public static String result() {
		String result = "";
		for (int i = 0; i < queuee.size(); i++) {

			result += queuee.get(i);
		}
		return result;
	}
}
