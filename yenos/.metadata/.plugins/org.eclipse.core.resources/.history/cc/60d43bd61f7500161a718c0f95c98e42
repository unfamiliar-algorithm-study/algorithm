/**
 * 
 */
package sta;

/**
 * @author yenos
 * @date 2016. 9. 4.
 */
public class main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		Stack stack = new Stack();

		System.out.println("===== arrSTack =====");
		// ARR!!!!!
		stack.arrPush("hi");
		stack.arrPush("nice");
		stack.arrPush("meet");
		stack.arrShowAllStack();
		// //pop
		// stack.arrPop();
		// //show all
		// stack.arrShowAllStack();
		// //pop
		// stack.arrPop();
		// stack.arrShowAllStack();

		System.out.println("===== END=====");
		System.out.println();
		System.out.println("===== LinkStack =====");

		stack.linkPush("hi");
		stack.linkPush("nice");
		stack.linkPush("to");
		System.out.println("===== showall =====");

		stack.linkShowAllNode();
		System.out.println("===== pop" + " =====");

		stack.linkPop();
		stack.linkPop();
		stack.linkShowAllNode();
		System.out.println("===== END=====");
		
		
		

		// Stack을 이용해 infix => postfix로 구현해보자!!!!!!!!!!!!!!
		// !!!!!!!!
		System.out.println("===== infix ==> posfix =====");

		String sick = "((A+B)*C)";

		String result = "";
		for (int i = 0; i < sick.length(); i++) {
			String strFirst = sick.substring(i, i + 1);
			System.out.println(strFirst);

			// 연산자가 나오면 넣고.
			if (strFirst.equals("+") || strFirst.equals("-") || strFirst.equals("*") || strFirst.equals("-")) {
				stack.linkPush(strFirst);
				// 아무것도안함
			} else if (strFirst.equals("(") || strFirst.equals("{") || strFirst.equals("[")) {
				// 닫는거면 팦해서 더해
			} else if (strFirst.equals(")") || strFirst.equals("}") || strFirst.equals("]")) {
				String popStr = stack.linkPop();
				result += popStr;

				// A,bC이면 result에 붙인다.
			} else {
				result += strFirst;
			}

		}
		//rufrhk
		System.out.println(result);
		System.out.println("===== end =====");
		

	}

}
