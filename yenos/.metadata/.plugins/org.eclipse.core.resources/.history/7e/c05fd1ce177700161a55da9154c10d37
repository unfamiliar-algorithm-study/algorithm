/**
 * 
 */
package graph;



/**
 * @author yenos
 * @date 2016. 9. 10.
 */
public class GraphArr {
	int[][] arr;
	int ARR_SIZE;
	
	public GraphArr(int ARR_SIZE){
		this.arr = new int[ARR_SIZE][ARR_SIZE];
		this.ARR_SIZE = ARR_SIZE;
	}
	
	
	// 0 , 1
	//인접행렬만들
	public void indsertArrData(int a, int b){
		if(a<0 || b<0 || a>ARR_SIZE-1 || b>ARR_SIZE-1){
			throwing(" 범위를 초과했습니다. ");
		}else{

			arr[a][b] = 1;
			arr[b][a] = 1;	
		}
	}
	
	public void prettyShowAll(){
		for(int i=0;i<ARR_SIZE;i++){
			for(int j=0;j<ARR_SIZE;j++){
				System.out.print(arr[i][j]);
			}
			System.out.println("");
		}
	}
	 boolean[] visit  = new boolean[ARR_SIZE];
	
	public void DFS(int v)
	{
	    int i;
	 
	    visit[v] = true; // 정점 v를 방문했다고 표시
	    for (i = 1; i <= ARR_SIZE; i++) 
	    {
	        // 정점 v와 정점 i가 연결되었고, 정점 i를 방문하지 않았다면
	        if (arr[v][i] == 1 && !visit[i])
	        {
	            System.out.println( v+"==>"+ i);
	            // 정점 i에서 다시 DFS를 시작한다
	            DFS(i);
	        }
	    }
	}
	
	
	
	
	class PkCustomException extends Exception {
		public PkCustomException(String message) {
			super(message);
		}
	}

	public void throwing(String msg) {
		try {
			throw new PkCustomException(msg);
		} catch (PkCustomException e) {
			e.printStackTrace();
		}
	}
}
