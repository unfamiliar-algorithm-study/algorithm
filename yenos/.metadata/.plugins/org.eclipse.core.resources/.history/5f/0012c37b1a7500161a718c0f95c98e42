/**
 * 
 */
package sta;

/**
 * @author yenos
 * @date 2016. 9. 4.
 */
public class Stack {

	class Node {
		String data;
		Node next;
	}

	Node top = null;

	public void push(String data) {
		Node tmp = new Node();
		tmp.data = data;
		//top이 널이면 
		//top을 만들어주고 
		if (top == null) {
			top = new Node();
			top.data = null;
			top.next = tmp;
		} else {
			//top 이 널이 아니라면 최소 1개가 존재한다.
			// case1. top -> 0node
			// case2. top -> 1 node -> 0 node
			
			//0노드 다음껏이 현재 들어온 tmp가 되어야하고 
			top.next.next = tmp;
			//top의 next는tmp로 바뀌어야한다.			
			top.next = tmp;
			
		}
	}
	
	public void linkShowAllNode(){
		

//		//Case  top -> 3 node // 2node // 0 node..
//		// 가장 상단의 노드를 뽑아낸다. 
//		Node tmp = top.next;

		
		
		
		
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	//@@@ arrray!!!!!
	private int STACK_SIZE = 0;
	String[] arrStack;

	// stack Arr를 만든다.
	public String[] makeAddStackArr() {
		if (arrStack != null) {

			String[] arrNew = new String[++STACK_SIZE];
			for (int i = 0; i < arrStack.length; i++) {
				arrNew[i] = arrStack[i];
			}

			return arrNew;
		} else {
			return new String[++STACK_SIZE];
		}
	}

	public String[] makeMinuStackArr() {
		// 널이아니면 무조건 한개 이상 존재
		if (arrStack != null) {
			// 사이즈하나줄이고
			String[] arrNew = new String[--STACK_SIZE];
			//
			// 줄인상태로 다 채워넣고
			for (int i = 0; i < STACK_SIZE; i++) {
				arrNew[i] = arrStack[i];
			}
			return arrNew;

			// 한개도없데 마이너슨한다.
		} else {
			throwing("index out of Range!!!");
			return null;
		}

	}

	// push
	public void arrPush(String data) {
		arrStack = makeAddStackArr();
		arrStack[STACK_SIZE - 1] = data;
	}

	// isEmpty
	public boolean isEmpt() {
		return STACK_SIZE == 0 ? true : false;
	}

	public void arrPop() {
		arrStack = makeMinuStackArr();
		// arr
	}

	public void arrShowAllStack() {
		if (STACK_SIZE == 0) {
			System.out.println("님 밑바닥이에요!");
		} else {
			for (int i = 0; i < arrStack.length; i++) {
				System.out.println("stack val ==> " + arrStack[i]);
			}
		}
	}

	class PkCustomException extends Exception {
		public PkCustomException(String message) {
			super(message);
		}
	}

	public void throwing(String msg) {
		try {
			throw new PkCustomException(msg);
		} catch (PkCustomException e) {
			e.printStackTrace();
		}
	}
}
