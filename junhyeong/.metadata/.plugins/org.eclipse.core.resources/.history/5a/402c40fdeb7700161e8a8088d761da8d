package linked;

public class LinkedTree {
	private TreeNode root;
	
	public LinkedTree(){
		root = null;
	}
	//***************** TreeNode ***************
	class TreeNode{
		public int keyData;
		
		public TreeNode leftChild;
		public TreeNode rightChild;
		
		public TreeNode(int data){
			this.keyData = data;
			this.leftChild = null;
			this.rightChild = null;
		}
		
		public int getData(){
			return this.keyData;
		}
	}
	//***************** INSERT ***************
	public void insert(int keyData){
		TreeNode insertNode = new TreeNode(keyData);
		
		System.out.println("-------------------------------" + keyData);
		if(root == null)
			root = insertNode;
		
		else
		{
			TreeNode current = root;
			TreeNode parent;
			
			while(true){
				parent = current; //부모 노드 설정
				
				if(keyData < current.keyData){
				//부모노드보다 입력받은 값이 작을때 왼쪽으로 전달
					current = current.leftChild;
					if(current == null){
						parent.leftChild = insertNode;
						return;
					}
					else{
						current = current.rightChild;
						if(current == null){
							parent.rightChild = insertNode;
							return;
						}
					}
				}
			}
		}
		System.out.println("-------------------------------" + keyData);
	}
	
	//***************** 탐색 ***************
	public int find(int keyData){
		TreeNode current = root;
		while(current.keyData != keyData){
			
			if(keyData < current.keyData)
				current = current.leftChild;
			else
				current = current.rightChild;
		}
		return current.keyData; // 탐색후 현재 노드 반환
	}
	
	//***************** 최대, 최솟값 탐색 ***************
	public TreeNode findMin(){
		TreeNode current = root;
		while(current.leftChild != null)
			current = current.leftChild;
		return current;
	}
	
	public TreeNode findMax(){
		TreeNode current = root;
		while(current.rightChild != null)
			current = current.rightChild;
		return current;
	}
	
	//***************** 삭제  ***************
	public boolean delete(int keyData){
		TreeNode current = root;
		TreeNode parent = current;
		
		while(current.keyData != keyData)
		{
			if(current == null)
				//해당 데이터 가지는 노드 없으므로 삭제 종료
				return false;
			
			parent = current;
			if(keyData < current.keyData)
				current = current.leftChild;
			else
				current = current.rightChild;
			
		}
		
		//키값을 가지는 노드의 자식노드가 존재 하지 않을때
		if(current.leftChild == null && current.rightChild == null){
			if(current == root)
				//현재 노드가 루트일때 트리 삭제
				root = null;
			else if(current == parent.leftChild)
				parent.leftChild = null;
			else
				parent.rightChild = null;
		}
		
		//왼쪽 자식 노드가 존재할 때
		else if(current.rightChild == null){
			if(current == root)
				root = current.leftChild;
			
			else if(current == parent.leftChild)
				parent.leftChild = current.leftChild;
			
			else
				parent.rightChild = current.leftChild;
		}
		
		//오른쪽 자식 노드가 존재할 때
		else if(current.leftChild == null){
			if(current == root)
				root = current.rightChild;
			
			else if(current == parent.leftChild)
				parent.leftChild = current.rightChild;
			
			else
				parent.rightChild = current.rightChild;
		}
		
		//자식이 두 곳 다 존재할때
		else{
			TreeNode candidate = getMinNode(current);
			
			if(current == root)
				root = candidate;
			else if(current == parent.leftChild)
				parent.leftChild = candidate;
			else
				parent.rightChild = candidate;
			
			candidate.leftChild = current.leftChild;
		}
		return true;
	}
	private TreeNode getMinNode(TreeNode deleteNode){
		TreeNode candidateParent = deleteNode;
		TreeNode candidate = candidateParent.rightChild;
		
		//삭제노드 오른쪽 자식의 왼쪽 자손 찾기
		while(candidate.leftChild != null){
			candidateParent = candidate;
			candidate = candidate.leftChild;
		}
		
		//후보노드가 삭제노드 오른쪽 자식의 왼쪽 자손일 때
		if(candidate != deleteNode.rightChild){
			//candidateParent.rightChild.leftChild 
			//!= candidateParent.rightChild
			candidateParent.leftChild = candidate.rightChild;
			candidate.rightChild = deleteNode.rightChild;
		}
		
		return candidate;
	}
	
	
	//***************** TRAVERSE ***************	
	public void traverse(int type){
		switch(type){
		case 1: 
			System.out.println("Preorder Traversal: ");
			preOrder(root);
			break;
		
		case 2: 
			System.out.print("Inorder traversal: ");
			inOrder(root);
			break;
		
		case 3: 
			System.out.print("Postorder traversal: ");
			postOrder(root);
			break;
		}
		System.out.println();
	}
	
	private void preOrder(TreeNode tempRoot){
		if(tempRoot != null){
			System.out.println(tempRoot.keyData + " ");
			preOrder(tempRoot.leftChild);
			preOrder(tempRoot.rightChild);
		}
	}
	private void inOrder(TreeNode tempRoot){
		if(tempRoot != null){
			inOrder(tempRoot.leftChild);
			System.out.println(tempRoot.keyData + " ");
			inOrder(tempRoot.rightChild);
		}
	}
	
	private void postOrder(TreeNode tempRoot){
		if(tempRoot != null){
			inOrder(tempRoot.leftChild);
			inOrder(tempRoot.rightChild);
			System.out.println(tempRoot.keyData + " ");
		}
	}
	
}
